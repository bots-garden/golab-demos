{
	// Place your golab-demos workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// 01-simple-go-plugin/call.sh
	"Extism plugin hello world": {
		"prefix": "plugin-hello",
		"body": [
		  "package main",
		  "",
		  "import (",
		  " \"github.com/extism/go-pdk\"",
		  ")",
		  "//âœ‹ never forget `export`",
		  "//export hello",
		  "func hello()  {",
		  " // read function argument from the memory",
		  " input := pdk.Input()",
		  "",
		  " // create the output",
		  " output := \"${1:Hello} \" + string(input)",
		  "        ",
		  " // copy output to host memory",
		  " mem := pdk.AllocateString(output)",
		  " ",
		  " pdk.OutputMemory(mem)",
		  "}",
		  "",
		  "func main() {}",
		  ""
		],
		"description": "Extism plugin hello world"
	  },
	  "Golang main": {
		"prefix": "go-main",
		"body": [
		  "package main",
		  "",
		  "func main() {",
		  "",
		  "}",
		  "",
		  ""
		],
		"description": "Golang main"
	  },
	  "Host app, ctx + get arguments": {
		"prefix": "host-init",
		"body": [
		  " ctx := context.Background()",
		  " ",
		  " args := os.Args[1:]",
		  " wasmFilePath := args[0]",
		  " functionName := args[1]",
		  " input := args[2]",
		  " manifestConfig := args[3]"
		],
		"description": "Host app, get arguments"
	  },
	  "Host Plugin Config": {
		"prefix": "host-plugin-config",
		"body": [
		  " levelInfo := extism.Info",
		  "",
		  " pluginConfig := extism.PluginConfig{",
		  "     ModuleConfig: wazero.NewModuleConfig().WithSysWalltime(),",
		  "     EnableWasi:   true,",
		  "     LogLevel:     &levelInfo,",
		  " }"
		],
		"description": "Host Plugin Config"
	  },
	  "Host Plugin Manifest": {
		"prefix": "host-plugin-manifest",
		"body": [
		  " pluginManifest := extism.Manifest{",
		  "     Wasm: []extism.Wasm{",
		  "         extism.WasmFile{Path: wasmFilePath},",
		  "     },",
		  "     AllowedHosts: []string{\"*\"}, // enable HTTP",
		  "     Config:       getConfigFromJsonString(manifestConfig),",
		  " }"
		],
		"description": "Host Plugin Manifest"
	  },
	  "Host get config from Json": {
		"prefix": "host-get-config-from-json",
		"body": [
		  "func getConfigFromJsonString(config string) map[string]string {",
		  " var manifestConfig map[string]string",
		  " err := json.Unmarshal([]byte(config), &manifestConfig)",
		  " if err != nil {",
		  "     fmt.Println(err)",
		  "     os.Exit(1)",
		  " }",
		  " return manifestConfig",
		  "}",
		  ""
		],
		"description": "Host get config from Json"
	  },
	  "Host create a plugin": {
		"prefix": "host-plugin-instance",
		"body": [
		  " wasmPlugin, err := extism.NewPlugin(ctx, pluginManifest, pluginConfig, nil)",
		  "",
		  " if err != nil {",
		  "     panic(err)",
		  " }"
		],
		"description": "Host create a plugin"
	  },
	  "Host call the function with the plugin": {
		"prefix": "host-plugin-call-function",
		"body": [
		  " _, result, err := wasmPlugin.Call(",
		  "     functionName,",
		  "     []byte(input),",
		  " )",
		  "",
		  " if err != nil {",
		  "     fmt.Println(err)",
		  "     os.Exit(1)",
		  " } else {",
		  "     fmt.Println(string(result))",
		  "     os.Exit(0)",
		  " }"
		],
		"description": "Host call the function with the plugin"
	  }
}